@model MyOwnSite.Models.Post




@using (Html.BeginForm(null, null,  FormMethod.Post, new {id="TestForm"}))
{


    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        
            <h4>Create New Post</h4>
        <hr />
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title)
                @Html.ValidationMessageFor(model => model.Title)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Message, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Message)
                @Html.ValidationMessageFor(model => model.Message)
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                
                <input type="submit" value="Create" class="btn btn-default" @*onclick="FunctionForm()"*@/>
            </div>
        </div>
    </div>
}

<button onclick="FunctionForm()" class="btn btn-default col-offset-md-2"style="display: inline-block">TestForm</button>


<script>

    $("form").submit(function (e) {
        e.preventDefault();
    }).validate({
        rules: {
            Title: { required: true },
            Message: { required: true }

        },
        messages: {
            Title: { required: "Title field is required" },
            Message: { required: "Message field is required" }

        },
        submitHandler: function (form) {
            FunctionForm(form);
            return false; //This doesn't prevent the form from submitting.
        }
    });

</script>
